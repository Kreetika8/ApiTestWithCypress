{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-16T10:31:59.695Z",
    "end": "2025-07-16T10:32:06.881Z",
    "duration": 7186,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "766bf97f-e03a-4667-8151-ef2874282cdb",
      "title": "",
      "fullFile": "cypress\\e2e\\Users.cy.ts",
      "file": "cypress\\e2e\\Users.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0d18186a-fc1c-416d-a659-31bdd775e74c",
          "title": "Users Module",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC01 - Create User Valid",
              "fullTitle": "Users Module TC01 - Create User Valid",
              "timedOut": null,
              "duration": 695,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n    name: faker_1.faker.person.fullName(),\n    gender: faker_1.faker.person.sex(),\n    email: faker_1.faker.internet.email(),\n    status: faker_1.faker.helpers.arrayElement(['active', 'inactive']),\n};\ncy.request({\n    method: 'POST',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    body: userData\n}).then((response) => {\n    expect(response.status).to.eq(201);\n    expect(response.body).to.include({\n        name: userData.name,\n        gender: userData.gender,\n        email: userData.email,\n        status: userData.status\n    });\n});",
              "err": {},
              "uuid": "b5b77a71-b561-4531-89d3-8ec8f48645e7",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC02 - Create User Missing Fields",
              "fullTitle": "Users Module TC02 - Create User Missing Fields",
              "timedOut": null,
              "duration": 395,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    method: 'POST',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    body: {},\n    failOnStatusCode: false,\n})\n    .then((response) => {\n    expect(response.status).to.eq(422);\n    expect(response.body).to.deep.include.members([\n        { field: 'email', message: \"can't be blank\" },\n        { field: 'name', message: \"can't be blank\" },\n        { field: 'gender', message: \"can't be blank, can be male of female\" },\n        { field: 'status', message: \"can't be blank\" },\n    ]);\n});",
              "err": {},
              "uuid": "fc9d4a35-88e2-4dcc-94f3-c2ad8899f363",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC03 - Get All Users",
              "fullTitle": "Users Module TC03 - Get All Users",
              "timedOut": null,
              "duration": 440,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    method: 'GET',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n}).then((response) => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.be.an('array');\n    expect(response.body.length).to.be.greaterThan(0);\n    response.body.forEach((user) => {\n        expect(user).to.have.property('id');\n        expect(user).to.have.property('name');\n        expect(user).to.have.property('email');\n        expect(user).to.have.property('gender');\n        expect(user).to.have.property('status');\n    });\n});",
              "err": {},
              "uuid": "e2c111d4-6876-40a7-8be8-1e1f6581c583",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC04 - Get User by Valid ID",
              "fullTitle": "Users Module TC04 - Get User by Valid ID",
              "timedOut": null,
              "duration": 388,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UserID = 8009583;\ncy.request({\n    method: 'GET',\n    url: `/users/${UserID}`,\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n}).then((response) => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.be.an('object');\n    expect(response.body).to.have.property('id', UserID);\n    expect(response.body).to.have.property('name');\n    expect(response.body).to.have.property('email');\n    expect(response.body).to.have.property('gender');\n    expect(response.body).to.have.property('status');\n});",
              "err": {},
              "uuid": "8518d610-d284-4f20-a262-26d38e50c8d9",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC05 - Get User by Invalid ID",
              "fullTitle": "Users Module TC05 - Get User by Invalid ID",
              "timedOut": null,
              "duration": 556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UserID = 1;\ncy.request({\n    method: 'GET',\n    url: `/users/${UserID}`,\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    failOnStatusCode: false,\n}).then((response) => {\n    expect(response.status).to.eq(404);\n    expect(response.body).to.have.property('message', 'Resource not found');\n});",
              "err": {},
              "uuid": "79a3f027-c6f5-44c9-82e4-513453504216",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC06 - Update User - Valid ",
              "fullTitle": "Users Module TC06 - Update User - Valid ",
              "timedOut": null,
              "duration": 910,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const initialUser = {\n    name: 'Kreetika Bhetuwal',\n    gender: 'female',\n    email: `kreetika${Date.now()}@gmail.com`,\n    status: 'active',\n};\ncy.request({\n    method: 'POST',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    body: initialUser,\n}).then((createResponse) => {\n    expect(createResponse.status).to.eq(201);\n    const userId = createResponse.body.id;\n    const updatedData = {\n        name: 'KreetikaUpdated',\n    };\n    cy.request({\n        method: 'PUT',\n        url: `/users/${userId}`,\n        headers: {\n            Authorization: `Bearer ${Cypress.env('apiToken')}`,\n        },\n        body: updatedData,\n    }).then((updateResponse) => {\n        expect(updateResponse.status).to.eq(200);\n        expect(updateResponse.body).to.have.property('id', userId);\n        expect(updateResponse.body.name).to.eq(updatedData.name);\n        expect(updateResponse.body.gender).to.eq(initialUser.gender);\n        expect(updateResponse.body.status).to.eq(initialUser.status);\n    });\n});",
              "err": {},
              "uuid": "3d8b492a-271b-47cc-b052-9f1224e4d49c",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC07 - Delete a user by ID",
              "fullTitle": "Users Module TC07 - Delete a user by ID",
              "timedOut": null,
              "duration": 773,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//create user\nconst userData = {\n    name: 'Delete Test User',\n    gender: 'female',\n    email: `delete${Date.now()}@gmail.com`,\n    status: 'active',\n};\ncy.request({\n    method: 'POST',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    body: userData,\n}).then((createResponse) => {\n    expect(createResponse.status).to.eq(201);\n    const userId = createResponse.body.id;\n    //perform delete\n    cy.request({\n        method: 'DELETE',\n        url: `/users/${userId}`,\n        headers: {\n            Authorization: `Bearer ${Cypress.env('apiToken')}`,\n        },\n    }).then((deleteResponse) => {\n        expect(deleteResponse.status).to.eq(204);\n        //verify deletion\n        cy.request({\n            method: 'GET',\n            url: `/users/${userId}`,\n            headers: {\n                Authorization: `Bearer ${Cypress.env('apiToken')}`,\n            },\n            failOnStatusCode: false,\n        }).then((getResponse) => {\n            expect(getResponse.status).to.eq(404);\n            expect(getResponse.body).to.have.property('message', 'Resource not found');\n        });\n    });\n});",
              "err": {},
              "uuid": "681520bb-a551-45c1-a4ee-0d2c2ac805f8",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC08 - Create User - Duplicate Email",
              "fullTitle": "Users Module TC08 - Create User - Duplicate Email",
              "timedOut": null,
              "duration": 683,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//create user\nconst userData = {\n    name: 'Kreetika Bhetuwa;',\n    gender: 'female',\n    email: `kreetika${Date.now()}@gmail.com`,\n    status: 'active',\n};\ncy.request({\n    method: 'POST',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    body: userData,\n}).then((Response) => {\n    expect(Response.status).to.eq(201);\n});\n// create another user\ncy.request({\n    method: 'POST',\n    url: '/users',\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n    body: userData,\n    failOnStatusCode: false,\n}).then((Response) => {\n    expect(Response.status).to.eq(422);\n    expect(Response.body[0]).to.have.property('message', 'has already been taken');\n});",
              "err": {},
              "uuid": "86262422-37f6-41ab-a2ca-efc4466b6527",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC09 - Get Users Filter by Gender ",
              "fullTitle": "Users Module TC09 - Get Users Filter by Gender ",
              "timedOut": null,
              "duration": 331,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const gender = 'female';\ncy.request({\n    method: 'GET',\n    url: `/users?gender=${gender}`,\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n}).then((response) => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.be.an('array');\n    expect(response.body.length).to.be.greaterThan(0);\n    response.body.forEach((user) => {\n        expect(user).to.have.property('gender', gender);\n    });\n});",
              "err": {},
              "uuid": "efc33d02-27f3-4699-b9d2-352c17049132",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC10 - Get Users Filter by Status ",
              "fullTitle": "Users Module TC10 - Get Users Filter by Status ",
              "timedOut": null,
              "duration": 558,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const status = 'active';\ncy.request({\n    method: 'GET',\n    url: `/users?status=${status}`,\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n}).then((response) => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.be.an('array');\n    expect(response.body.length).to.be.greaterThan(0);\n    response.body.forEach((user) => {\n        expect(user).to.have.property('status', status);\n    });\n});",
              "err": {},
              "uuid": "ec0a1dc6-231e-4d1b-a8ce-18c02c1f77b6",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC11 - Get Users Invalid Query Parm",
              "fullTitle": "Users Module TC11 - Get Users Invalid Query Parm",
              "timedOut": null,
              "duration": 561,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const status = 'alive';\ncy.request({\n    method: 'GET',\n    url: `/users?status=${status}`,\n    headers: {\n        Authorization: `Bearer ${Cypress.env('apiToken')}`,\n    },\n}).then((response) => {\n    expect(response.status).to.eq(200);\n    expect(response.body.length).to.eq(0);\n});",
              "err": {},
              "uuid": "553ce84a-cb5b-4381-b09c-0cc4f7a13864",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC12 - Create User Without Token",
              "fullTitle": "Users Module TC12 - Create User Without Token",
              "timedOut": null,
              "duration": 387,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n    name: faker_1.faker.person.fullName(),\n    gender: faker_1.faker.person.sex(),\n    email: faker_1.faker.internet.email(),\n    status: faker_1.faker.helpers.arrayElement(['active', 'inactive']),\n};\ncy.request({\n    method: 'POST',\n    url: '/users',\n    body: userData,\n    failOnStatusCode: false\n}).then((response) => {\n    expect(response.status).to.eq(401);\n    expect(response.body).to.have.property('message', 'Authentication failed');\n});",
              "err": {},
              "uuid": "e692a343-29ab-42cb-b273-c5645343591a",
              "parentUUID": "0d18186a-fc1c-416d-a659-31bdd775e74c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5b77a71-b561-4531-89d3-8ec8f48645e7",
            "fc9d4a35-88e2-4dcc-94f3-c2ad8899f363",
            "e2c111d4-6876-40a7-8be8-1e1f6581c583",
            "8518d610-d284-4f20-a262-26d38e50c8d9",
            "79a3f027-c6f5-44c9-82e4-513453504216",
            "3d8b492a-271b-47cc-b052-9f1224e4d49c",
            "681520bb-a551-45c1-a4ee-0d2c2ac805f8",
            "86262422-37f6-41ab-a2ca-efc4466b6527",
            "efc33d02-27f3-4699-b9d2-352c17049132",
            "ec0a1dc6-231e-4d1b-a8ce-18c02c1f77b6",
            "553ce84a-cb5b-4381-b09c-0cc4f7a13864",
            "e692a343-29ab-42cb-b273-c5645343591a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6677,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}